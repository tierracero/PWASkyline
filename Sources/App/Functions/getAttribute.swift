//
//  getAttribute.swift
//  
//
//  Created by Victor Cantu on 9/21/22.
//

import Foundation
import TCFundamentals
import JavaScriptKit
import Web

func getElementHeight(_ id: String) -> Int {
    
    var value: Int = 0
    
    if let _value = JSObject.global.getElementHeight!( id).number {
        value = _value.toInt
    }
    
    return value
}


func getElementWidth(_ id: String) -> Int {
    
    var value: Int = 0
    
    
    if let _value = JSObject.global.getElementWidth!(id).number {
        value = _value.toInt
    }
    
    return value
}

func getElementX(_ id: String) -> Int {
    
    var value: Int = 0
    
    if let _value = JSObject.global.getElementLeft!( id).number {
        value = _value.toInt
    }
    
    return value
}

func getElementY(_ id: String) -> Int {
    
    var value: Int = 0
    
    if let _value = JSObject.global.getElementTop!( id).number {
        value = _value.toInt
    }
    
    return value
}

func jcrop(_ id: String,_ width: Int, _ height: Int) {
    _ = JSObject.global.jcrop!( id, width, height)
}

func jcrop(_ id: String, _ itemid: String, _ img: String,_ width: Int,_ height: Int) {
    _ = JSObject.global.jcropWithImage!( id, itemid, img, width, height)
}

func removeItem(_ id: String) {
    _ = JSObject.global.removeItem!(id)
}

func copyToClipbord(_ text: String) {
    _ = JSObject.global.copyToClipbord!(text)
}

public struct LoginToken: Codable {
    
    /// My general WS connid
    public var connid: String
    /// Token generated by auth.getSocialWSToken
    public var token: String
    
    public init(
        connid: String,
        token: String
    ){
        self.connid = connid
        self.token = token
    }
    
}
public enum LoginStatusType: String, Codable {
    
    case connected
    case not_authorized
    case unknown
    
    var description: String {
        switch self {
        case .connected:
            return "Conectado"
        case .not_authorized:
            return "No autorizado"
        case .unknown:
            return "desconocido"
        }
    }
    
    var fullDescription: String {
        switch self {
        case .connected:
            return "The person is logged into Facebook, and has logged into your webpage."
        case .not_authorized:
            return "The person is logged into Facebook, but has not logged into your webpage."
        case .unknown:
            return "The person is not logged into Facebook, so you don't know if they have logged into your webpage. Or FB.logout() was called before, and therefore, it cannot connect to Facebook."
        }
    }
    
}
public struct AuthResponse: Codable {
    /// An access token for the person using the webpage.
    public let accessToken: String
    /// A UNIX time stamp when the login expires. Once the token expires, the person will need to login again.
    public let expiresIn: Int64
    /// The amount of time before the accessToken expires, in seconds, and the person will need to login again.
    public let data_access_expiration_time: Int64
    /// A signed parameter that contains information about the person using your webpage.
    public let signedRequest: String
    /// The ID of the person using your webpage.
    public let userID: String
}
public struct FBGetLoginStatus: Codable {
    public let status: LoginStatusType
    public let authResponse: AuthResponse?
    
}

public func initfb(
    callback: @escaping ((
        _ payload: FBGetLoginStatus
    ) -> ())
) {
    
    _ = JSObject.global.initfb!(JSClosure { jresp in
        
        print("ðŸ’Ž initfb  ðŸ’Ž")
        
        let resp: FBGetLoginStatus = .init(status: .unknown, authResponse: nil)
        
        ////FBGetLoginStatus
        if let jsval = jresp.first?.jsValue.string {
            
            print("ðŸ’Ž jsval  ðŸ’Ž")
            
            if let data = jsval.data(using: .utf8) {
                
                do {
                    callback(try JSONDecoder().decode(FBGetLoginStatus.self, from: data))
                }
                catch {
                    callback(resp)
                }
                
            }
            else{
                callback(resp)
            }
            
        }
        
        return JSValue.undefined
    })
    
}

public func logoutfb(
    callback: @escaping ((
        _ payload: FBGetLoginStatus
    ) -> ())
) {
    
    _ = JSObject.global.logoutfb!(JSClosure { jresp in
        
        print("ðŸ’Ž logoutfb  ðŸ’Ž")
        
        let resp: FBGetLoginStatus = .init(status: .unknown, authResponse: nil)
        
        ////FBGetLoginStatus
        if let jsval = jresp.first?.jsValue.string {
            
            print("ðŸ’Ž jsval  ðŸ’Ž")
            
            if let data = jsval.data(using: .utf8) {
                
                do {
                    callback(try JSONDecoder().decode(FBGetLoginStatus.self, from: data))
                }
                catch {
                    callback(resp)
                }
                
            }
            else{
                callback(resp)
            }
            
        }
        
        return JSValue.undefined
    })
    
}

public func loginfb(
    callback: @escaping ((
        _ payload: FBGetLoginStatus
    ) -> ())
) {
    
    _ = JSObject.global.loginfb!(JSClosure { jresp in
        
        print("ðŸ’Ž loginfb  ðŸ’Ž")
        
        let resp: FBGetLoginStatus = .init(status: .unknown, authResponse: nil)
        
        ////FBGetLoginStatus
        if let jsval = jresp.first?.jsValue.string {
            
            print("ðŸ’Ž jsval  ðŸ’Ž")
            
            if let data = jsval.data(using: .utf8) {
                
                do {
                    callback(try JSONDecoder().decode(FBGetLoginStatus.self, from: data))
                }
                catch {
                    callback(resp)
                }
                
            }
            else{
                callback(resp)
            }
            
        }
        
        return JSValue.undefined
    })
    
}


///transparent
